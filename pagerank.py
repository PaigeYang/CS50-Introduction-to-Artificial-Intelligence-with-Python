import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    Ex.
    dictionary = {"page1":{"link1", "link2"...},
                  "page2":{"link1", "link3",,,},
                  ,,,
                  }
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.

    Ex.
    dictionary = {"page1":0.4,
                  "page2":0.1,
                  "page2":0.3,
                  ,,,
                  }
    """

    trans = dict()

    # export all links in that page as the lsit
    links = list(corpus[page])

    # calculate the number of pages in corpus
    num_all = len(corpus)

    # if there at least a link in the page
    if links:
        num = len(links)

        for key in list(corpus):
            if key in links:
                trans[key] = damping_factor/num + (1-damping_factor)/num_all
            else:
                trans[key] = (1-damping_factor)/num_all
    # if there no link in the page
    else:
        for key in list(corpus):
            trans[key] = 1/num_all

    return trans

def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """

    # The first sample is generated by choosing from a page at random.
    page = random.choice(list(corpus))

    pageranks = dict()

    for i in range(n):

        if page in pageranks:
            pageranks[page] = pageranks[page] + 1
        else:
            pageranks[page] = 1

        sample = transition_model(corpus, page, damping_factor)

        # keys stand for all pages, and values stand for probability distribution
        keys = list(sample)
        values = list(sample.values())

        # Based on the probability distribution from pervious page, we chose the next page
        page = random.choices(keys, values)[0]

    # convert pageranks to probility
    for page in list(pageranks.copy()):
        pageranks[page] = pageranks[page]/n

    return pageranks


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """

    num_all = len(corpus)
    pageranks = dict()

    #  Start by assuming the PageRank of every page is 1 / N
    for page in list(corpus):
        pageranks[page] = [1/num_all]

    while True:
        for page in list(corpus):

            total = 0

            # add all i in formulate
            for key, values in corpus.items():
                if page in values:
                    total = total + pageranks[key][-1]/len(values)

            # add updated PR(p) in pageranks list
            pageranks[page].append((1-damping_factor)/num_all + damping_factor*total)

        change = 0

        #check if change > 0.001
        for value in pageranks.values():
            if abs(value[-2] - value[-1]) > change:
                change = abs(value[-2] - value[-1])

        if change < 0.001:
            break


    # only select the latest value in the list
    for page in pageranks:
        pageranks[page] = pageranks[page][-1]

    return pageranks


if __name__ == "__main__":
    main()
